name: Financial Reports

on:
  schedule:
    - cron: '0 9 * * 1'  # Weekly on Monday at 9 AM UTC
    - cron: '0 9 1 * *'  # Monthly on 1st at 9 AM UTC
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of report to generate'
        required: true
        default: 'monthly'
        type: choice
        options:
          - monthly
          - weekly
          - custom
      year:
        description: 'Year (YYYY) - Required for monthly report'
        required: false
        type: string
      month:
        description: 'Month (1-12) - Required for monthly report'
        required: false
        type: string
      start_date:
        description: 'Start date (YYYY-MM-DD) - Required for custom range'
        required: false
        type: string
      end_date:
        description: 'End date (YYYY-MM-DD) - Required for custom range'
        required: false
        type: string

jobs:
  generate-report:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true  # Enable Git LFS for large model files
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run weekly report
      if: github.event.schedule == '0 9 * * 1' || (github.event_name == 'workflow_dispatch' && github.event.inputs.report_type == 'weekly')
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        REPORT_EMAIL: ${{ secrets.REPORT_EMAIL }}
      run: python automated_reports.py weekly
        
    - name: Run scheduled monthly report
      if: github.event.schedule == '0 9 1 * *' || (github.event_name == 'workflow_dispatch' && github.event.inputs.report_type == 'monthly' && github.event.inputs.year == '' && github.event.inputs.month == '')
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        REPORT_EMAIL: ${{ secrets.REPORT_EMAIL }}
      run: |
        # Get current month's dates
        YEAR=$(date +%Y)
        MONTH=$(date +%m)
        LAST_DAY=$(date -d "$YEAR-$MONTH-01 +1 month -1 day" +%d)
        START_DATE="$YEAR-$MONTH-01"
        END_DATE="$YEAR-$MONTH-$LAST_DAY"
        
        # Generate report with insights
        python main.py create_ppt --start-date $START_DATE --end-date $END_DATE --output "monthly_report_${START_DATE}.pptx" --email $REPORT_EMAIL --insights
        
    - name: Run on-demand monthly report
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.report_type == 'monthly' && github.event.inputs.year != '' && github.event.inputs.month != ''
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        REPORT_EMAIL: ${{ secrets.REPORT_EMAIL }}
      run: |
        # Calculate start and end dates
        YEAR=${{ github.event.inputs.year }}
        MONTH=${{ github.event.inputs.month }}
        LAST_DAY=$(date -d "$YEAR-$MONTH-01 +1 month -1 day" +%d)
        START_DATE="$YEAR-$MONTH-01"
        END_DATE="$YEAR-$MONTH-$LAST_DAY"
        
        # Generate report with insights
        python main.py create_ppt --start-date $START_DATE --end-date $END_DATE --output "monthly_report_${START_DATE}.pptx" --email $REPORT_EMAIL --insights

    - name: Run custom date range report
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.report_type == 'custom' && github.event.inputs.start_date != '' && github.event.inputs.end_date != ''
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        REPORT_EMAIL: ${{ secrets.REPORT_EMAIL }}
      run: |
        START_DATE=${{ github.event.inputs.start_date }}
        END_DATE=${{ github.event.inputs.end_date }}
        
        # Generate report with insights
        python main.py create_ppt --start-date $START_DATE --end-date $END_DATE --output "custom_report_${START_DATE}_to_${END_DATE}.pptx" --email $REPORT_EMAIL --insights 